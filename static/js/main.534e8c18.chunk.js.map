{"version":3,"sources":["components/FieldItem.js","components/Field.js","config/config.js","components/PaletteItem.js","components/Palette.js","components/Submit.js","functions/postData.js","App.js","serviceWorker.js","index.js"],"names":["FieldItem","index","size","active","onSelect","color","styles","width","height","borderColor","backgroundColor","className","onClick","e","style","Field","fieldRef","colors","useState","items","i","push","key","ref","PaletteItem","target","Palette","r","g","b","Math","round","generateItems","Submit","onSubmit","a","url","data","fetch","method","mode","cache","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","App","activeFieldItem","setActiveFieldItem","activePaletteItem","setActivePaletteItem","setColors","createRef","x","offsetTop","current","y","offsetLeft","console","log","postData","then","Object","assign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.534e8c18.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction FieldItem({ index, size, active, onSelect, color }) {\n  const styles = {\n    width: size,\n    height: size,\n    borderColor: active ? \"blue\" : color || \"white\",\n    backgroundColor: color || \"white\",\n  };\n\n  return (\n    <div\n      className=\"FieldItem\"\n      onClick={(e) => onSelect(e, index)}\n      style={styles}\n    />\n  );\n}\n\nFieldItem.propTypes = {\n  index: PropTypes.number.isRequired,\n  size: PropTypes.number.isRequired,\n  active: PropTypes.bool.isRequired,\n  onSelect: PropTypes.func.isRequired,\n};\n\nexport default FieldItem;\n","import React, { useState } from \"react\";\nimport FieldItem from \"./FieldItem\";\nimport { initialFieldSize } from \"../config/config\";\nimport PropTypes from \"prop-types\";\n\nfunction Field({ active, onSelect, fieldRef, colors }) {\n  const [size] = useState(initialFieldSize);\n  const itemSize = 10;\n\n  const styles = {\n    width: size + 2,\n    height: size + 2,\n  };\n\n  const items = [];\n\n  for (let i = 0; i < (size / itemSize) ** 2; i++) {\n    items.push(\n      <FieldItem\n        key={i}\n        size={itemSize}\n        onSelect={onSelect}\n        index={i}\n        active={i === active}\n        color={colors[i]}\n      />\n    );\n  }\n\n  return (\n    <div className=\"Field\" ref={fieldRef} style={styles}>\n      {items}\n    </div>\n  );\n}\n\nField.propTypes = {\n  active: PropTypes.any,\n  ref: PropTypes.any,\n  onSelect: PropTypes.func.isRequired,\n  colors: PropTypes.object,\n};\n\nexport default Field;\n","export const initialFieldSize = 700;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction PaletteItem({ index, active, onSelect, color }) {\n  const styles = {\n    backgroundColor: color,\n    borderColor: active ? \"blue\" : \"white\",\n  };\n\n  return (\n    <div\n      className=\"PaletteItem\"\n      onClick={(e) => {\n        const color = e.target.style.backgroundColor;\n        onSelect(index, color);\n      }}\n      style={styles}\n    />\n  );\n}\n\nPaletteItem.propTypes = {\n  color: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  active: PropTypes.bool.isRequired,\n  onSelect: PropTypes.func.isRequired,\n};\n\nexport default PaletteItem;\n","import React from \"react\";\nimport PaletteItem from \"./PaletteItem\";\nimport PropTypes from \"prop-types\";\n\nfunction Palette({ active, onSelect }) {\n  function generateItems() {\n    const items = [];\n\n    for (let r = 0, max = 4, i = 0; r <= max; r++) {\n      for (let g = 0; g <= max; g++) {\n        for (let b = 0; b <= max; b++, i++) {\n          const color = `rgba(${Math.round((r * 255) / max)}, ${Math.round(\n            (g * 255) / max\n          )}, ${Math.round((b * 255) / max)})`;\n          items.push(\n            <PaletteItem\n              key={i}\n              index={i}\n              onSelect={onSelect}\n              active={i === active}\n              color={color}\n            />\n          );\n        }\n      }\n    }\n\n    return items;\n  }\n\n  const items = generateItems();\n\n  return <div className=\"Palette\">{items}</div>;\n}\n\nPalette.propTypes = {\n  active: PropTypes.any,\n  onSelect: PropTypes.func.isRequired,\n};\n\nexport default Palette;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Submit({ onSubmit }) {\n  return (\n    <button onClick={onSubmit} className=\"btn btn-success\">\n      Отправить\n    </button>\n  );\n}\n\nSubmit.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Submit;\n","export async function postData(url = \"\", data = {}) {\n  const response = await fetch(url, {\n    method: \"POST\",\n    mode: \"no-cors\",\n    cache: \"no-cache\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    redirect: \"follow\",\n    referrerPolicy: \"no-referrer\",\n    body: JSON.stringify(data),\n  });\n\n  return await response.json();\n}\n","import React, { useState, createRef } from \"react\";\nimport Field from \"./components/Field\";\nimport Palette from \"./components/Palette\";\nimport Submit from \"./components/Submit\";\nimport { postData } from \"./functions/postData\";\n\nfunction App() {\n  const [activeFieldItem, setActiveFieldItem] = useState({});\n  const [activePaletteItem, setActivePaletteItem] = useState({});\n  const [colors, setColors] = useState({});\n\n  const fieldRef = createRef();\n\n  function onSelectFieldItem(e, index) {\n    const data = {\n      index,\n      x: e.target.offsetTop - 1 - fieldRef.current.offsetTop,\n      y: e.target.offsetLeft - 1 - fieldRef.current.offsetLeft,\n    };\n\n    index === activeFieldItem.index\n      ? setActiveFieldItem({})\n      : setActiveFieldItem(data);\n  }\n\n  function onSelectPaletteItem(index, color) {\n    const data = {\n      index,\n      color,\n    };\n\n    index === activePaletteItem.index\n      ? setActivePaletteItem({})\n      : setActivePaletteItem(data);\n  }\n\n  function onSubmit() {\n    const data = {\n      color: activePaletteItem.color,\n      x: activeFieldItem.x,\n      y: activeFieldItem.y,\n    };\n\n    console.log(data);\n\n    postData(\"//localhost:8090/check\", data).then((response) => {\n      console.log(response);\n    });\n\n    setColors(\n      Object.assign(\n        {\n          [activeFieldItem.index]: activePaletteItem.color,\n        },\n        colors\n      )\n    );\n\n    setActivePaletteItem({});\n    setActiveFieldItem({});\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row mb-2\">\n          <Field\n            active={activeFieldItem.index}\n            onSelect={onSelectFieldItem}\n            fieldRef={fieldRef}\n            colors={colors}\n          />\n          <Palette\n            active={activePaletteItem.index}\n            onSelect={onSelectPaletteItem}\n          />\n        </div>\n        <div className=\"row\">\n          <Submit onSubmit={onSubmit} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}